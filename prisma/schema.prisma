datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

enum InstagramScrappingTaskStatus {
  WAITING
  PENDING
  RUNNING
  FINISHED
  FAILED
}

enum InstagramScrappingTaskType {
  LIKES
  COMMENTS
  FOLLOWERS
}

enum InstagramScrappingTaskLogEvent {
  SEARCH_HALTED
  FINISHED_SEARCH
  FAILURE_CHECK
}

model InstagramScrappingTaskLog {
  id    String                         @id @default(auto()) @map("_id") @db.ObjectId
  event InstagramScrappingTaskLogEvent

  leads Int?

  timestamp DateTime @default(now())

  instagramScrappingTask   InstagramScrappingTask? @relation(fields: [instagramScrappingTaskId], references: [id])
  instagramScrappingTaskId String?                 @db.ObjectId

  @@map("instagramscrappingtasklogs")
}

model InstagramScrappingTask {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  arg    String
  batch  String
  tags   String[]
  status InstagramScrappingTaskStatus @default(WAITING)
  type   InstagramScrappingTaskType

  leads Int?

  logs InstagramScrappingTaskLog[]

  isAssignedToSalesTeam Boolean

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  finishedAt DateTime?

  @@map("instagramscrappingtasks")
}

// LEADS

model Lead {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  batch String
  arg   String

  tags String[]

  firstname String
  lastname  String?

  instagram String

  mobilephone String?
  phone       String?

  email String?

  isLeadQualified Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leads")
}

// REDRIVE AUTHENTICATION
model RedriveAuth {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  token String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("redriveauth")
}

// CRON JOBS - TASKS

enum TaskStatus {
  FINISHED
  WAITING
  PENDING
  STOPPED
  ERROR
  CANCELLED
  RUNNING
}

enum TaskKey {
  HANDLE_POSTS_BY_PROFILE_ON_APIFY
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  key TaskKey

  data Json

  status TaskStatus @default(WAITING)

  runAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("tasks")
}
